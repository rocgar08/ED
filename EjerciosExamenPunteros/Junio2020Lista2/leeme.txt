Material proporcionado
======================
- main.cpp: El programa principal que realiza la prueba de
la operación implementada. Este código NO debe modificarse. 
- lista.h: La implementación del TAD lista basado en nodos
doblemente enlazados vista en clase, extendida con métodos
adicionales para imprimir la lista. Incluye también, al comienzo
de la parte pública, el método 'cortaPorK', que es el que 
hay que implementar. Debe, así mismo, determinarse justificadamente
la complejidad de la operación en el comentario que precede al método.

Formato de la entrada
=====================
Cada línea de la entrada contiene la especificación de una lista (lista de enteros) seguida del valor de K.
La especificación de la lista comienza por el número de elementos de la lista seguido de los distintos elementos. 
Así, la línea 7 1 2 3 4 5 6 7 3 especifica la lista de 7 elementos 1 2 3 4 5 6 7 y el último 3 es el valor de K.
La entrada termina con una línea que contiene -1.
 
Formato de la salida
====================
Por cada línea de la entrada se generan dos líneas en la salida.
La primera línea contiene: 
(i) la lista receptora después de haber realizado el corte (impresa de principio a fin); 
(ii) # como separador;
(iii) la lista receptora después de haber realizado el corte (impresa de fin a principio).
La segunda línea contiene:
(i) la lista destino después de incorporarle los elementos cortados (impresa de principio a fin);
(ii) # como separador;
(iii) la lista destino después de incorporarle los elementos cortados (impresa de fin a principio).

Ejemplo: al procesar la entrada 7 1 2 3 4 5 6 7 3 se obtiene la salida
1 2 #2 1
3 4 5 6 7 #7 6 5 4 3

Ejemplo de entrada
==================
0 10
1 1 1
1 1 10
2 1 2 1
2 1 2 2
2 1 2 10
5 1 2 3 4 5 1
5 1 2 3 4 5 4
5 1 2 3 4 5 5
5 1 2 3 4 5 10
7 1 2 3 4 5 6 7 3
-1


Salida asociada (2 líneas por cada línea de entrada)
===============
#
#

#
1 #1

1 #1
#

#
1 2 #2 1

1 #1
2 #2

1 2 #2 1
#

#
1 2 3 4 5 #5 4 3 2 1

1 2 3 #3 2 1
4 5 #5 4

1 2 3 4 #4 3 2 1
5 #5

1 2 3 4 5 #5 4 3 2 1
#

1 2 #2 1
3 4 5 6 7 #7 6 5 4 3

